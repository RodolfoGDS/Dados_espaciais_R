## instalando os pacotes
install.packages('rgdal')
install.packages('raster')
library(raster)
## Atribuindo a variavel relevo o caminho do do arquivo TIF
relevo <- raster('C:/Users/rodolfo.paula/Documents/MeusProjetos/Dados_espaciais_R/SRTM/SF-23-Z-B.tif')
plot(relevo)
relevo
class(relevo)
typeof(relevo)
methods(class= 'RasterLayer')
install.packages('sf')
library(sf)
st_read(path)
path=('C:\Users\rodolfo.paula\Documents\MeusProjetos\Dados_espaciais_R\datasets')
path=('C:/Users/rodolfo.paula/Documents/MeusProjetos/Dados_espaciais_R/datasets')
st_read(path)
path=('C:/Users/rodolfo.paula/Documents/MeusProjetos/Dados_espaciais_R/datasets/BR_UF_2020.shp')
st_read(path)
malha <- st_read(path)
class(malha)
dados <- st_read(path)
class(dados)
View(dados)
##Visulaizando os dados
plot(dados)
estado <- dados$geometry
class(estado)
plot(estado)
estados <- dados$geometry
class(estados)
plot(estados)
rm(estado)
rm(malha)
estado <- estado[[2]]
estado <- estado[[2]]
estado <- estados[[2]]
class(estado)
plot(estado)
rasters_unidos2 <-  do.call(mosaic, rasters_listados)
# Vamos usar as imagens de Relevo do Estado do Rio de Janeiro.
## https://www.cnpm.embrapa.br/projetos/relevobr/download/rj/rj.htm
### Algoritimo:
# 1 - Setar o path(caminho) para acessar as imagens no seu computador
# 2 - Carregar o pacote raster
# 3 - Lendo os arquivos raster e armazenando nas variáveis ---> r1, r2, r3 .....
# 4 - Juntar todos os arquivos rasters em apenas 1 arquivo.
# 5 - Resolvendo problemas de sobrepoição ao juntar os rasters.
# 6 - Criando uma lista com todos os arquivos rasters
# 7 - Lendo todos os raster de uma só vez.
# 8 - Recortar o raster unido com o shape do Estado do Rio de Janeiro
# Setando o diretório
setwd('C:/Users/rodolfo.paula/Documents/MeusProjetos/Dados_espaciais_R/datasets/relevo_rj')
# Carregar o pacote raster
library(raster)
# Lendo os arquivos rasters
r1 =  raster('SF-23-X-B.tif')
r2 = raster('SF-23-X-D.tif')
r3 <- raster('SF-23-Z-A.tif')
r4 = raster('SF-23-Z-B.tif')
r5 = raster('SF-23-Z-C.tif')
r6 = raster('SF-23-Z-D.tif')
r7 = raster('SF-24-V-A.tif')
r8 = raster('SF-24-V-C.tif')
r9 = raster('SF-24-Y-A.tif')
r10 = raster('SF-24-Y-C.tif')
plot(rasters)
# Vamos juntar todos os arquivos rasters em um unico raster usando a função merge()
rasters_merge <- merge(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10)
# Para resolver problemas de sobreposição de informação durante a junção de rasters,
# é recomendado usar a função mosaic(). A função merge() ao unir os rasters, resolve o problema de
# sobreposição de informação no pixel usando os dados do raster anterior, ou seja ele determina a
# forma de resolver e escolher qual valor ele irá usar para aquele pixel. Já a função mosaic()
# permite alterações quando é determinado um val.or no atributo fun=  ... function.No caso vamos
# passar a média.
rasters_mosaic = mosaic(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10, fun=mean)
plot(rasters_mosaic)
# Criando uma lista de arquivos rasters usando a função list.files()
lista_rasters = list.files(pattern = '*.tif')
lista_rasters
# Lendo os arquivos usando a função lapply(list, function) e do.call(function, dataset)
rasters_listados <- lapply(lista_rasters, raster)
rasters_unidos <- do.call(merge, rasters_listados)
plot(rasters_unidos)
## Caso queira usar a funcao mosaic para evitar probelmas em sobreposição podemos fazer
## da seguinte maneira. Criaremos uma coluna no rasters_listados e passaremos a media
rasters_unidos2 <-  do.call(mosaic, rasters_listados)
rasters_unidos2 <-  do.call(mosaic, rasters_listados)
rasters_unidos2 <-  do.call(mosaic, rasters_listados, fun= mean())
rasters_unidos2 <-  do.call(mosaic, rasters_listados, fun= mean)
plot(rasters_unidos)
rasters_unidos <- do.call(merge, rasters_listados)
library(geobr)
rj_estado = read_state(code_state = 'RJ')
plot(rj_estado$geom)
plot(rasters_unidos)
plot(rj_estado$geom, add=TRUE)
# Recortando o raster
crop(rasters_unidos, rj_estado)
crs(rasters_unidos)
library(sf)
st_crs(rj_estado)$proj4string
library(magrittr)
library(magrittr)
rj_estado_wgs = read_state(code_state = 'RJ') %>%
st_transform(crs = '+proj=longlat +datum=WGS84 +no_defs')
relevo <- crop(rasters_unidos, rj_estado_wgs)
plot(relevo)
plot(rj_estado_wgs)
plot(rj_estado_wgs$geom, add=T)
plot(relevo)
plot(rj_estado_wgs$geom, add=T)
#Agora vamos criar uma mascara
relevo_rj = mask(relevo, rj_estado_wgs)
plot(relevo_rj)
plot(rj_estado_wgs$geom, add=T)
relevo_out_rj = mask(relevo, rj_estado_wgs, inverse=T)
plot(relevo_out_rj)
plot(rj_estado_wgs$geom, add= T)
writeRaster(x= relevo_rj, filename = 'relevo_estado_rio_de_janeiro.tif', format='Gtif',
overwrite = T)
writeRaster(x= relevo_rj, filename = 'relevo_estado_rio_de_janeiro.tif',
overwrite = T)
writeRaster(x= relevo_rj, filename = 'relevo_estado_rio_de_janeiro.tif', format= 'Gtiff'
overwrite = T)
writeRaster(x= relevo_rj, filename = 'relevo_estado_rio_de_janeiro.tif', format= 'Gtiff',
overwrite = T)
writeRaster(x= relevo_rj, filename = 'relevo_estado_rio_de_janeiro.tif',
overwrite = T)
